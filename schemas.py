from graphene_sqlalchemy import SQLAlchemyObjectType
from graphene import (
    ObjectType, Field, List, String, Int, Boolean,
    relay, DateTime, Float
)
from sqlalchemy import func

from database import db_session

import models
from views import PipelinesExecution as PipelinesExecutionModel
import utils
import os


INSTANCE = os.getenv('API_INSTANCE')
SCIENCE_URL = os.getenv('SCIENCE_URL')
DACHS_URL = os.getenv('DACHS_URL')


class ProductClassAttribute():
    class_id = Int(description="Product class unique id number")
    type_id = Int(description="Product type Relationship id number")
    class_name = String(description="Name of the class")
    display_name = String(description="Name displayed of the class")
    is_system = Boolean(description="Generated by the system")


class ProductClass(SQLAlchemyObjectType, ProductClassAttribute):
    """Product Class node"""
    data_loader_product_type = utils.DataLoaderOneToOne(
        models.ProductClass, models.ProductType)

    def resolve_product_type(self, info):
        return ProductClass.data_loader_product_type.load(self.class_id)

    class Meta:
        model = models.ProductClass
        interfaces = (relay.Node,)
        connection_class = utils.Connection


class ProductTypeAttribute():
    type_id_seq = Int(description="Product type unique id number")
    type_id = Int(description="Product type id number")
    type_name = String(description="Name of the type")
    display_name = String(description="Name displayed of the type")


class ProductType(SQLAlchemyObjectType, ProductTypeAttribute):
    """Product Type node"""

    class Meta:
        model = models.ProductType
        interfaces = (relay.Node,)


class PipelinesAttribute():
    pipeline_id = Int(description="Pipeline unique ID number")
    name = String(description="Pipeline name")
    display_name = String(description="Pipeline name displayed")
    group_id = Int(description="Group ID number")
    order_number = Int(description="Order of the pipeline in menu")
    user_id = Int(description="User ID number")
    version = String(description="Version number")
    version_date = DateTime(description="Version date")
    description = String(description="Pipeline description")
    pipeline_stage_id = Int(description="Stage ID number")
    xml_workflow = String(description="Components workflow of pipeline")
    pipeline_status_id = Int(description="Status ID number")
    multidataset = Boolean(
        description="Allows multiple datasets to be used if true")
    readme = String(description="Document describing how the pipeline works.")
    any_output_class = Boolean()
    processes = List(lambda: Processes)


class Pipelines(SQLAlchemyObjectType, PipelinesAttribute):
    """Pipelines node"""
    process_loader = utils.DataLoaderOneToMany(
        models.Pipelines, models.ProcessPipeline, models.Processes)

    def resolve_processes(self, info):
        return Pipelines.process_loader.load(self.pipeline_id)

    class Meta:
        model = models.Pipelines
        interfaces = (relay.Node,)
        connection_class = utils.Connection


class ModulesAttribute():
    module_id = Int()
    name = String()
    version = String()
    display_name = String()
    xml_config = String()
    description = String()
    version_date = DateTime()
    grade = Float()
    user_id = Int()


class Modules(SQLAlchemyObjectType, ModulesAttribute):
    """Modules node"""
    data_loader = utils.DataLoaderOneToOne(models.Modules, models.TgUser)

    def resolve_user(self, info):
        return Modules.data_loader.load(self.module_id)

    class Meta:
        model = models.Modules
        interfaces = (relay.Node,)
        connection_class = utils.Connection


class PipelinesModulesAttribute():
    pipeline_id = Int(description="Pipeline unique ID number")
    module_id = Int(description="Module unique ID number")
    xml_config = String()


class PipelinesModules(SQLAlchemyObjectType, PipelinesModulesAttribute):
    """Pipelines modules node"""
    data_loader_module = utils.DataLoaderOneToOne(
        models.PipelinesModules,
        models.Modules,
        pk_inner_model=models.PipelinesModules.module_id)
    data_loader_pipeline = utils.DataLoaderOneToOne(
        models.PipelinesModules,
        models.Pipelines,
        pk_inner_model=models.PipelinesModules.pipeline_id)

    def resolve_module(self, info):
        return PipelinesModules.data_loader_module.load(self.module_id)

    def resolve_pipeline(self, info):
        return PipelinesModules.data_loader_pipeline.load(self.pipeline_id)

    class Meta:
        model = models.PipelinesModules
        interfaces = (relay.Node,)


class PipelineStageAttribute():
    pipeline_stage_id = Int()
    name = String()
    display_name = String()
    level = Int()


class PipelineStage(SQLAlchemyObjectType, PipelineStageAttribute):
    """PipelineStage node"""

    class Meta:
        model = models.PipelineStage
        interfaces = (relay.Node,)


class GroupPypelinesAttribute():
    group_id = Int(description="Group ID number")
    name = String(description="Group name")
    parent_group_id = Int(description="Parent Group ID number")
    order_number = Int(description="Order of the group in menu")
    display_name = String(description="Group name displayed")


class GroupPypelines(SQLAlchemyObjectType, GroupPypelinesAttribute):
    """GroupPypelines node"""

    class Meta:
        model = models.GroupPypelines
        interfaces = (relay.Node,)


class ReleaseTagAttribute():

    tag_id = Int(description="Tag unique ID number")
    name = String(description="Release name")
    version = String(description="Version number")
    release_date = DateTime(description="Release date")
    description = String(description="Release description")
    doc_url = String(description="URL to documentation")
    release_display_name = String(description="Tag name displayed")


class ReleaseTag(SQLAlchemyObjectType, ReleaseTagAttribute):
    """Release Tag node"""

    class Meta:
        model = models.ReleaseTag
        interfaces = (relay.Node,)
        connection_class = utils.Connection


class FiltersAttribute():
    filter = String()
    lambda_min = Float()
    lambda_max = Float()
    lambda_mean = Float()


class Filters(SQLAlchemyObjectType, FiltersAttribute):
    """Filters node"""

    class Meta:
        model = models.Filters
        interfaces = (relay.Node,)


class ProcessesAttribute():
    process_id = Int()
    xml_config = String()
    session_id = Int()
    start_time = DateTime()
    end_time = DateTime()
    xml_before_run = String()
    namespace = String()
    name = String()
    process_dir = String()
    expiration_time = DateTime()
    id_site = String()
    pype_input = String()
    comments = String()
    start_ingestion = DateTime()
    end_ingestion = DateTime()
    flag_published = Boolean()
    published_date = DateTime()
    readme = String()
    instance = String()
    flag_removed = Boolean()
    status_id = Int()
    size = Int()
    config_id = Int()
    product_log = String()


class Processes(SQLAlchemyObjectType, ProcessesAttribute):
    """Processes node"""
    session_loader = utils.DataLoaderOneToOne(models.Processes, models.Session)
    fields_loader = utils.DataLoaderOneToMany(
        models.Processes, models.ProcessFields, models.Fields)
    inputs_loader = utils.DataLoaderOneToMany(
        models.Processes, models.ProcessInputs, models.Products)

    def resolve_session(self, info):
        return Processes.session_loader.load(self.process_id)

    def resolve_fields(self, info):
        return Processes.fields_loader.load(self.process_id)

    def resolve_inputs(self, info):
        return Processes.inputs_loader.load(self.process_id)

    class Meta:
        model = models.Processes
        interfaces = (relay.Node,)
        connection_class = utils.Connection

    def resolve_product_log(self, info):
        """ Mount the product_log link """

        return os.path.join(
            SCIENCE_URL,
            "VP/getViewProcessCon?process_id={}".format(self.process_id)
        )


class ProductsAttribute():
    product_id = Int()
    file_id = Int()
    job_id = Int()
    table_id = Int()
    class_id = Int()
    flag_removed = Boolean()
    display_name = String()
    version = Int()
    selected_name = String()
    data_type = String()


class Products(SQLAlchemyObjectType, ProductsAttribute):
    """Products node"""

    class Meta:
        model = models.Products
        interfaces = (relay.Node,)
        connection_class = utils.Connection

    def resolve_data_type(self, info):
        """ Returns data type of the product """

        data_type = 'Table'
        if self.file_id:
            data_type = 'File'
        return data_type


class ProcessComponentAttribute():
    process_id = Int()
    module_id = Int()
    version = String()
    version_date = DateTime()


class ProcessComponent(SQLAlchemyObjectType, ProcessComponentAttribute):
    """Process Component node"""

    class Meta:
        model = models.ProcessComponent
        interfaces = (relay.Node,)


class ProcessExecutionNode(ObjectType):
    """Process execution node"""
    process_count = Int()
    last_process_id = Int()
    start_time = DateTime()
    end_time = DateTime()
    status = String()


class PipelinesExecutionAttribute():
    pipeline_id = Int(description="Pipeline unique ID number")
    display_name = String()
    name = String()
    pipeline_stage_id = Int()
    field_id = Int()
    process = Field(ProcessExecutionNode)


class PipelinesExecution(SQLAlchemyObjectType, PipelinesExecutionAttribute):
    """Pipelines execution node"""

    class Meta:
        model = PipelinesExecutionModel
        interfaces = (relay.Node,)

    def resolve_process(self, info):

        subproc = db_session.query(
            models.Pipelines.pipeline_id,
            func.count(func.distinct(models.Processes.process_id)).label('process_count'),
            func.max(models.Processes.process_id).label('last_process_id')
        ).filter_by(
            pipeline_stage_id=self.pipeline_stage_id
        ).filter_by(
            pipeline_id=self.pipeline_id
        ).join(
            models.Pipelines.processes
        ).filter_by(
            flag_removed=False, instance=INSTANCE
        ).outerjoin(
            models.Processes.fields
        ).filter_by(
            field_id=self.field_id
        ).group_by(
            models.Pipelines.pipeline_id
        ).subquery()

        proc = db_session.query(
            models.Processes.start_time,
            models.Processes.end_time,
            models.ProcessStatus.name.label('status'),
            subproc.c.process_count,
            subproc.c.last_process_id
        ).join(
            subproc, models.Processes.process_id == subproc.c.last_process_id
        ).join(
            models.ProcessStatus
        ).one_or_none()

        procexec = proc._asdict() if proc else {}

        return ProcessExecutionNode(**procexec)


class CommentsAttribute():
    comment_id = Int()
    comments = String()
    process_id = Int()
    date = DateTime()
    user_id = Int()
    hid = Float()
    hid_title = String()


class Comments(SQLAlchemyObjectType, CommentsAttribute):
    """Comments node"""

    class Meta:
        model = models.Comments
        interfaces = (relay.Node,)


class MaskAttribute():

    mask_id = Int()
    filter = String()
    date = DateTime()
    flag_removed = Boolean()
    tag_id = Int()
    field_id = Int()
    table_id = Int()


class Mask(SQLAlchemyObjectType, MaskAttribute):
    """Mask node"""
    data_loader_table = utils.DataLoaderOneToOne(models.Mask, models.Tables)
    data_loader_tag = utils.DataLoaderOneToOne(models.Mask, models.ReleaseTag)
    data_loader_field = utils.DataLoaderOneToOne(models.Mask, models.Fields)

    def resolve_table(self, info):
        return Mask.data_loader_table.load(self.mask_id)

    def resolve_tag(self, info):
        return Mask.data_loader_tag.load(self.mask_id)

    def resolve_field(self, info):
        return Mask.data_loader_field.load(self.mask_id)

    class Meta:
        model = models.Mask
        interfaces = (relay.Node,)


class MapAttribute():

    map_id = Int()
    nside = Int()
    ordering = String()
    image = String()
    snr = Int()
    type = String()
    magnitude = String()
    filter = String()
    date = DateTime()
    flag_removed = Boolean()
    tag_id = Int()
    field_id = Int()
    table_id = Int()


class Map(SQLAlchemyObjectType, MapAttribute):
    """Map node"""
    data_loader_table = utils.DataLoaderOneToOne(models.Map, models.Tables)
    data_loader_tag = utils.DataLoaderOneToOne(models.Map, models.ReleaseTag)

    def resolve_table(self, info):
        return Map.data_loader_table.load(self.map_id)

    def resolve_tag(self, info):
        return Map.data_loader_tag.load(self.map_id)

    class Meta:
        model = models.Map
        interfaces = (relay.Node,)


class CatalogAttribute():

    catalog_id = Int()
    num_tiles = Int()
    num_objects = Int()
    num_columns = Int()
    visibility = Int()
    catalog_name = String()
    version = String()
    ingestion_date = DateTime()
    user_id = Int()
    description = String()
    status_id = Int()
    flag_removed = Boolean()
    table_id = Int()


class Catalog(SQLAlchemyObjectType, CatalogAttribute):
    """Catalog node"""
    data_loader_table = utils.DataLoaderOneToOne(models.Catalog, models.Tables)

    def resolve_table(self, info):
        return Catalog.data_loader_table.load(self.catalog_id)

    class Meta:
        model = models.Catalog
        interfaces = (relay.Node,)


# Unused imports but necessary to show their objects from
# other objects.
class TgUserAttribute():
    user_id = Int()
    user_name = String()
    email_address = String()
    display_name = String()
    created = DateTime()
    affiliation = String()
    status = String()
    url_photo = String()
    about = String()


class TgUser(SQLAlchemyObjectType, TgUserAttribute):
    """TgUser node"""

    class Meta:
        model = models.TgUser
        interfaces = (relay.Node,)


class PipelineStatusAttribute():
    pipeline_status_id = Int()
    name = String()
    display_name = String()


class PipelineStatus(SQLAlchemyObjectType, PipelineStatusAttribute):
    """PipelineStatus node"""

    class Meta:
        model = models.PipelineStatus
        interfaces = (relay.Node,)


class FileLocatorAttribute():
    file_id = Int()
    uri = String()
    provenance_id = Int()
    survey_id = Int()
    category_id = Int()
    file_name = String()
    file_type_id = Int()
    namespace = String()


class FileLocator(SQLAlchemyObjectType, FileLocatorAttribute):
    """FileLocator node"""

    class Meta:
        model = models.FileLocator
        interfaces = (relay.Node,)


class TablesAttribute():
    table_id = Int()
    schema_name = String()
    table_name = String()
    dachs_url = String()


class Tables(SQLAlchemyObjectType, TablesAttribute):
    """Tables node"""

    class Meta:
        model = models.Tables
        interfaces = (relay.Node,)

    def resolve_dachs_url(self, info):
        """ Mount link to DACHS service """

        return os.path.join(
            DACHS_URL,
            "%(schema)s/%(table)s/q/form" % {
                "schema": self.schema_name,
                "table": self.table_name
            }
        )


class ProcessStatusAttribute():
    process_status_id = Int()
    name = String()
    display_name = String()


class ProcessStatus(SQLAlchemyObjectType, ProcessStatusAttribute):
    """Process Status node"""

    class Meta:
        model = models.ProcessStatus
        interfaces = (relay.Node,)


class SeesionAttribute():
    session_id = String()
    data = String()
    expiration_time = DateTime()
    user_id = Int()
    tg_session = String()


class Session(SQLAlchemyObjectType, SeesionAttribute):
    """Session node"""

    class Meta:
        model = models.Session
        interfaces = (relay.Node,)


class JobRunsAttribute():
    job_id = Int()
    process_id = Int()
    xml_config = String()
    parent_job_id = Int()
    module_id = Int()
    rc = Int()
    end_time = DateTime()
    start_time = DateTime()
    nc_ip = String()
    hid = String()


class JobRuns(SQLAlchemyObjectType, JobRunsAttribute):
    """JobRuns node"""

    class Meta:
        model = models.JobRuns
        interfaces = (relay.Node,)


class SavedProcessesAttribute():
    process_id = Int()
    saved_date = DateTime()
    user_comments = String()
    saved_date_end = DateTime()
    volume = Int()
    number_files = Int()


class SavedProcesses(SQLAlchemyObjectType, SavedProcessesAttribute):
    """SavedProcesses node"""

    class Meta:
        model = models.SavedProcesses
        interfaces = (relay.Node,)


class FieldsAttribute():

    field_id = Int(description='Field ID')
    field_name = String(description='Field name')
    display_name = String(description='Field ID')
    install_date = DateTime(description='Instalation date')
    release_date = DateTime(description='Release date')
    status = Boolean(
        description='Field status: true = available / false = unavailable')
    start_date = DateTime(description='Start date')
    discovery_date = DateTime(description='Discovery date')
    release_tag_id = Int(description='Release ID')


class Fields(SQLAlchemyObjectType, FieldsAttribute):
    """Fields Tag node"""

    data_loader_release_tag = utils.DataLoaderOneToOne(
        models.Fields, models.ReleaseTag)

    def resolve_release_tag(self, info):
        return Fields.data_loader_release_tag.load(self.field_id)

    class Meta:
        model = models.Fields
        interfaces = (relay.Node,)
        connection_class = utils.Connection


class ProcessInputsAttribute():
    process_id = Int()
    product_id = Int()


class ProcessInputs(SQLAlchemyObjectType, ProcessInputsAttribute):
    """Process Inputs node"""

    class Meta:
        model = models.ProcessInputs
        interfaces = (relay.Node,)


class ProcessPipelineAttribute():
    process_id = Int()
    pipeline_id = Int()
    version = String()
    version_date = DateTime()


class ProcessPipeline(SQLAlchemyObjectType, ProcessPipelineAttribute):
    """Process Pipeline node"""

    class Meta:
        model = models.ProcessPipeline
        interfaces = (relay.Node,)
